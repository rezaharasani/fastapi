services:

  fastapi-app:
    image: fastapi-app:${PROJECT_VERSION}
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - POSTGRES_SERVER=${POSTGRES_SERVER}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
    command: [ "fastapi", "run", "app/main.py", "--port", "8000" ]
    healthcheck:
      test: curl --fail http://localhost:8000/health || exit 1
      interval: 2s
      timeout: 5s
      retries: 3
      start_period: 5s
    depends_on:
      - postgres


  postgres:
    image: postgres:17.5-alpine
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    env_file:
      - ./.env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - ${POSTGRES_OUT_PORT}:5432
    volumes:
      - postgres-db:/var/lib/postgresql/data


  nginx:
    image: nginx:1.29.0
    container_name: nginx_proxy
    restart: unless-stopped
    env_file:
      - ./.env
    ports:
      - "${NGINX_PORT}:80"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - ./nginx:/etc/nginx/conf.d
    depends_on:
      - fastapi-app

volumes:
  postgres-db:

